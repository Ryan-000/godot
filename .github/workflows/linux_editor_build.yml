name: üêß Linux Editor Builds
on:
  push:
    branches:
      - ryan_engine_master

env:
  GODOT_BASE_BRANCH: ryan_engine_master
  SCONSFLAGS: module_mono_enabled=true debug_symbols=yes warnings=extra werror=yes verbose=yes
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  TSAN_OPTIONS: suppressions=misc/error_suppressions/tsan.txt

jobs:
  build-linux:
    runs-on: ubuntu-20.04
    name: Editor with Mono Build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Free disk space on runner
        run: |
          echo "Disk usage before:" && df -h
          sudo rm -rf /usr/local/lib/android
          echo "Disk usage after:" && df -h

      # Restore cache to improve build time
      - name: Restore Godot build cache
        uses: actions/cache@v3
        with:
          path: |
            bin/
            core/
            drivers/
            editor/
            main/
            misc/
            modules/
            platform/
            scene/
            servers/
            tests/
            thirdparty/
            .sconsign.dblite
          key: ${{ runner.os }}-godot-build-${{ hashFiles('SConstruct') }}


      # Install dependencies for building Godot
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y scons python3

      # Compile the Godot editor using your custom SCons flags
      - name: Build Godot Editor with Mono
        run: |
          scons platform=linuxbsd ${{ env.SCONSFLAGS }} -j $(nproc --all)

      # Generate Mono glue files
      - name: Generate C# glue
        run: |
          ./bin/godot.linuxbsd.editor.x86_64.mono --headless --generate-mono-glue ./modules/mono/glue

      # Build .NET assemblies for Mono
      - name: Build .NET assemblies
        run: |
          python3 ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd

      # Upload build artifacts, including the GodotSharp folder
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: godot-linux-editor-with-godotsharp
          path: |
            ./bin/godot.linuxbsd.editor.x86_64.mono
            ./bin/GodotSharp  # Include GodotSharp folder

      # Create a GitHub release (automatically triggered after each push)
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub provides this token automatically
        with:
          tag_name: ${{ github.sha }}  # Tag the release with the commit SHA
          release_name: "Godot Linux Build ${{ github.sha }}"
          draft: false
          prerelease: false

      # Upload the binary and GodotSharp folder to the release
      - name: Upload Release Asset - Editor Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/godot.linuxbsd.editor.x86_64.mono
          asset_name: godot.linuxbsd.editor.x86_64.mono
          asset_content_type: application/octet-stream

      - name: Upload Release Asset - GodotSharp Folder
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/GodotSharp
          asset_name: GodotSharp.zip  # You can zip the folder before uploading
          asset_content_type: application/zip

        # Save the cache for incremental builds
      - name: Save Godot build cache
        uses: actions/cache@v3
        with:
          path: |
            bin/
            core/
            drivers/
            editor/
            main/
            misc/
            modules/
            platform/
            scene/
            servers/
            tests/
            thirdparty/
            .sconsign.dblite
          key: ${{ runner.os }}-godot-build-${{ hashFiles('SConstruct') }}

